type Artist {
  city: String
  createdAt: ISO8601DateTime!
  email: String
  id: ID!
  medium: String
  name: String
  passwordDigest: String
  posts(orderBy: PostOrderEnum): [Post!]!
  profileImage: String
  state: String
  updatedAt: ISO8601DateTime!
  zipcode: String
}

"""
Autogenerated input type of CreateDonation
"""
input CreateDonationInput {
  amount: Float!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  name: String!
  postId: Int!
}

"""
Autogenerated return type of CreateDonation.
"""
type CreateDonationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  donation: Donation!
  errors: [String!]!
}

"""
Autogenerated input type of CreatePost
"""
input CreatePostInput {
  artistId: Int!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentAmount: Float!
  details: String!
  imageUrl: String!
  requestedAmount: Float!
  title: String!
}

"""
Autogenerated return type of CreatePost.
"""
type CreatePostPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  post: Post!
}

type Donation {
  amount: Float
  createdAt: ISO8601DateTime!
  email: String
  id: ID!
  name: String
  postId: Int!
  updatedAt: ISO8601DateTime!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

type Mutation {
  createDonation(
    """
    Parameters for CreateDonation
    """
    input: CreateDonationInput!
  ): CreateDonationPayload
  createPost(
    """
    Parameters for CreatePost
    """
    input: CreatePostInput!
  ): CreatePostPayload
  updateDonation(
    """
    Parameters for UpdateDonation
    """
    input: UpdateDonationInput!
  ): UpdateDonationPayload
  updatePost(
    """
    Parameters for UpdatePost
    """
    input: UpdatePostInput!
  ): UpdatePostPayload
}

type Post {
  artistId: Int!
  createdAt: ISO8601DateTime!
  currentAmount: Float
  details: String
  donationPercentage: Float!
  donations: [Donation!]!
  id: ID!
  imageUrl: String
  requestedAmount: Float
  title: String
  updatedAt: ISO8601DateTime!
}

enum PostOrderEnum {
  """
  Sort by ascending order
  """
  ASC

  """
  Sort by descending order
  """
  DESC
}

type Query {
  artist(id: ID!): Artist!
  artists: [Artist!]!

  """
  Get a list of posts with optional sorting
  """
  posts(orderBy: PostOrderEnum): [Post!]!
}

"""
Autogenerated input type of UpdateDonation
"""
input UpdateDonationInput {
  amount: Float!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  id: ID!
  name: String!
  postId: Int!
}

"""
Autogenerated return type of UpdateDonation.
"""
type UpdateDonationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  donation: Donation
  errors: [String!]!
}

"""
Autogenerated input type of UpdatePost
"""
input UpdatePostInput {
  artistId: Int!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentAmount: Float!
  details: String!
  id: ID!
  imageUrl: String!
  requestedAmount: Float!
  title: String!
}

"""
Autogenerated return type of UpdatePost.
"""
type UpdatePostPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  post: Post
}
